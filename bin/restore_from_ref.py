#! /usr/bin/env python3
import argparse
from GTF import GTF

# Goal is to retrieve gtf attributes in known gene from input annotation e.g gene_name
def restore_from_ref(ref, gtf):
    genes = {}
    transcripts = {}

    # Parse ref annotation
    with open(ref) as fd:
        for record in GTF.parse_by_line(fd):
            # Store attributes of gene or transcript from ref annotation
            if record.feature == "gene":
                genes[record["gene_id"]] = record.attributes
            elif record.feature == "transcript":
                transcripts[record["transcript_id"]] = record.attributes

    # Parse gtf with known genes generated by bambu e.g without all attributes
    with open(gtf) as fd:
        for record in GTF.parse_by_line(fd):
            # If novel isoform, retrive from dict attributes from ref
            if record["transcript_id"].startswith("tx."):
                record.attributes.update(genes[record["gene_id"]])
                record["transcript_biotype"] = record["gene_biotype"]
                if "gene_source" in record:
                    record["transcript_source"] = "bambu"
            # if not novel isoform, just set source as reference and retrieve attributes
            else:
                record.source = "reference"
                record.attributes.update(transcripts[record["transcript_id"]])

            # Render record in gtf line to stdout
            print(record)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Restore ref attributes in novel gtf.")
    parser.add_argument("-gtf", type=str, help="gtf file to prettify", required=True)
    parser.add_argument(
        "-ref", type=str, help="ref annotation where informations are", required=True
    )
    args = parser.parse_args()

    restore_from_ref(args.ref, args.gtf)
